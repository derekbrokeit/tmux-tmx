#!/bin/bash
# This script opens a new base session or attaches to it
# The benefit of this implementation is that it can attach 
# independently through a new-session
#
# Modified MUX start script from:
#  http://mutelight.org/articles/practical-tmux  
#

# Works because bash automatically trims by assigning to variables and by 
# passing arguments
trim() { echo $1; }

if [[ -f $HOME/.path ]] ; then
    source $HOME/.path
else
    exit 1
fi

if [[ $1 == "--no-clean" ]] ; then
    shift 1
    NO_CLEAN=1
else
    NO_CLEAN=0
fi
if [[ $1 == "--force" ]] ; then
    shift 1
    export TMUX=
fi

if [[ -z "$1" ]]; then
    echo "Specify session name as the first argument"
    exit
fi

# Only because I often issue `ls` to this script by accident
if [[ "$1" == "ls" ]]; then
    tmux ls
    exit
fi

# establish a default response
base_session="$1"
if [[ "$1" == "--default" ]] || [[ "$1" == "-d" ]] || [[ "$#" -eq 0 ]] ; then
  base_session=$(hostname -s)
fi

# exit if we are in a dumb terminal or something unkown (eg. DTERM)
if [[ $TERM != xterm* ]] && [[ $TERM != screen* ]] ; then
   exit
fi

## startup files
TMUX_CONF=$HOME/.tmux.conf
TMUX_CONF_NEST=$TMUX_CONF.nested
TMUX_CONF_MINI=$TMUX_CONF.mini
TMUX_CONF_OSX=$TMUX_CONF.osx

# setup configuration files for this session
fileConf=$TMUX_CONF
if [[ -n $COLUMNS ]] ; then
  # tput cols seems to always output a default of 80 when used as a variable or redirected value
  # therefore, we must limit this to zsh, which has the COLUMNS variable
  if [[ $COLUMNS -lt 100 ]] ; then
    TERM=xterm-256color
    fileConf=$TMUX_CONF_MINI
  fi
fi
# nested
if [[ $TERM == screen* ]] ; then
   # make sure to use the nested-tmux configuration file
   fileConf=$TMUX_CONF_NEST
fi

# This actually works without the trim() on all systems except OSX
# this counts the number of open tmx sessions with the given session name
tmux_nb=$(trim `tmux ls 2> /dev/null | grep "^$base_session" | wc -l`) 

# if we are inside another tmux-session, fool the terminal
# otherwise it should have no effect
TEMP_TERM=$TERM
TEMP_TERM_SUFFIX=${TERM#$(echo $TERM | cut -f 1 -d'-')}
TERM="xterm${TEMP_TERM_SUFFIX}"


# creating the base_session, but not connecting to it
if [[ "$tmux_nb" == "0" ]]; then
   # no base session detected, launch it detached
   tmux -u2 -f $fileConf new-session -d -s $base_session
fi

# it's time to attach to an existing session
# Make sure we are not already in a tmux session 
if [[ -z $TMUX ]]; then
   # this gaurds against locally-nested tmux-sessions

   # Kill defunct sessions first
   function tmclean(){
      this_session=$(tmux display -p '#S')
      # Kill defunct sessions first
      old_sessions=$(tmux ls 2>/dev/null | egrep "^[0-9]{14}" | cut -f 1 -d:)
      for old_session_id in $old_sessions; do
          echo "kill old tm-session: $old_session_id"
          tmux -u2 kill-session -t $old_session_id
      done
   }

   if [[ NO_CLEAN == 0 ]] ; then
       tmclean
   fi

   # setup configuration files for this session
   # Session is is date and time to prevent conflict
   session_id=`date +"%Y%m%d%H%M%S"`
   # Create a new session (without attaching it) and link to base session 
   # to share windows
   tmux -u2 new-session -d -t $base_session -s $session_id
   # Create a new window in that session
   #tmux new-window

   # Attach to the new session @window:0
   tmux -u2 select-window -t  $session_id:0
   tmux -u2 attach-session -t $session_id \; source-file $fileConf 

   # When we detach from it, kill the session
   tmux -u2 kill-session -t $session_id 2> /dev/null
fi
 
# reset the terminal attribute
TERM=$TEMP_TERM


